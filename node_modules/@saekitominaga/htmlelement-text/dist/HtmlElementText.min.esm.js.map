{"version":3,"sources":["HtmlElementText.esm.js"],"names":["_thisElement","__classPrivateFieldSet","this","receiver","privateMap","value","has","TypeError","set","__classPrivateFieldGet","get","[object Object]","thisElement","text","textContent","context","document","createElement","getContext","beginPath","undefined","documentElement","computedStyleMap","stylePropertyMap","font","styleDeclaration","getComputedStyle","fontStyle","fontVariant","fontWeight","fontSize","fontFamily","measureText","width","WeakMap"],"mappings":"AAAA,IAaIA,EAbAC,EAA0BC,MAAQA,KAAKD,wBAA2B,SAAUE,EAAUC,EAAYC,GAClG,IAAKD,EAAWE,IAAIH,GAChB,MAAM,IAAII,UAAU,kDAGxB,OADAH,EAAWI,IAAIL,EAAUE,GAClBA,GAEPI,EAA0BP,MAAQA,KAAKO,wBAA2B,SAAUN,EAAUC,GACtF,IAAKA,EAAWE,IAAIH,GAChB,MAAM,IAAII,UAAU,kDAExB,OAAOH,EAAWM,IAAIP,mBAQX,MAIXQ,YAAYC,GACRZ,EAAaQ,IAAIN,UAAM,GACvBD,EAAuBC,KAAMF,EAAcY,GAS/CD,SAASE,EAAOJ,EAAuBP,KAAMF,GAAcc,aACvD,MAAMC,EAAUC,SAASC,cAAc,UAAUC,WAAW,MAE5D,GADAH,EAAQI,iBAC0CC,IAA9CJ,SAASK,gBAAgBC,iBAAgC,CAEzD,MAAMC,EAAmBd,EAAuBP,KAAMF,GAAcsB,mBACpEP,EAAQS,KAAO,GAAGD,EAAiBb,IAAI,iBAAiBa,EAAiBb,IAAI,mBAAmBa,EAAiBb,IAAI,kBAAkBa,EAAiBb,IAAI,gBAAgBa,EAAiBb,IAAI,qBAEhM,CACD,MAAMe,EAAmBC,iBAAiBjB,EAAuBP,KAAMF,GAAe,IACtFe,EAAQS,KAAO,GAAGC,EAAiBE,aAAaF,EAAiBG,eAAeH,EAAiBI,cAAcJ,EAAiBK,YAAYL,EAAiBM,aAEjK,OAAOhB,EAAQiB,YAAYnB,GAAMoB,OAGzCjC,EAAe,IAAIkC","file":"HtmlElementText.esm.js","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _thisElement;\n/**\n * HTMLElement text\n *\n * @version 1.1.1\n */\nexport default class {\n    /**\n     * @param {HTMLElement} thisElement - Target element\n     */\n    constructor(thisElement) {\n        _thisElement.set(this, void 0); // 対象要素\n        __classPrivateFieldSet(this, _thisElement, thisElement);\n    }\n    /**\n     * Get the text width (the width of that inline box)\n     *\n     * @param {string} text - Text to calculate width (If not specified, HTMLElement.textContent)\n     *\n     * @returns {number} Text width in CSS pixels\n     */\n    getWidth(text = __classPrivateFieldGet(this, _thisElement).textContent) {\n        const context = document.createElement('canvas').getContext('2d');\n        context.beginPath();\n        if (document.documentElement.computedStyleMap !== undefined) {\n            /* CSSStyleValue API 対応ブラウザ https://caniuse.com/mdn-api_cssstylevalue */\n            const stylePropertyMap = __classPrivateFieldGet(this, _thisElement).computedStyleMap();\n            context.font = `${stylePropertyMap.get('font-style')} ${stylePropertyMap.get('font-variant')} ${stylePropertyMap.get('font-weight')} ${stylePropertyMap.get('font-size')} ${stylePropertyMap.get('font-family')}`;\n        }\n        else {\n            const styleDeclaration = getComputedStyle(__classPrivateFieldGet(this, _thisElement), '');\n            context.font = `${styleDeclaration.fontStyle} ${styleDeclaration.fontVariant} ${styleDeclaration.fontWeight} ${styleDeclaration.fontSize} ${styleDeclaration.fontFamily}`;\n        }\n        return context.measureText(text).width;\n    }\n}\n_thisElement = new WeakMap();\n"]}